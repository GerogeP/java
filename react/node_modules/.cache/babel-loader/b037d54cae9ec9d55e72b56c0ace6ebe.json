{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useLayoutEffect, useRef } from 'react';\n\nconst useKeyPress = function (keys, callback) {\n  _s();\n\n  let node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // implement the callback ref pattern\n  const callbackRef = useRef(callback);\n  useLayoutEffect(() => {\n    callbackRef.current = callback;\n  }); // handle what happens on key press\n\n  const handleKeyPress = useCallback(event => {\n    // check if one of the key is part of the ones we want\n    if (keys.some(key => event.key === key)) {\n      callbackRef.current(event);\n    }\n  }, [keys]);\n  useEffect(() => {\n    // target is either the provided node or the document\n    const targetNode = node !== null && node !== void 0 ? node : document; // attach the event listener\n\n    targetNode && targetNode.addEventListener(\"keydown\", handleKeyPress); // remove the event listener\n\n    return () => targetNode && targetNode.removeEventListener(\"keydown\", handleKeyPress);\n  }, [handleKeyPress, node]);\n};\n\n_s(useKeyPress, \"MQWScAWXWJfL55HjEfOqxc7o480=\");\n\nexport default useKeyPress;","map":{"version":3,"names":["useCallback","useEffect","useLayoutEffect","useRef","useKeyPress","keys","callback","node","callbackRef","current","handleKeyPress","event","some","key","targetNode","document","addEventListener","removeEventListener"],"sources":["/Users/panglili/study-react/src/keyshortcuts/useKeyPress.tsx"],"sourcesContent":["import { useCallback, useEffect, useLayoutEffect, useRef } from 'react';\n\nconst useKeyPress = (keys: string[], callback: any, node = null) => {\n    // implement the callback ref pattern\n    const callbackRef = useRef(callback);\n    useLayoutEffect(() => {\n        callbackRef.current = callback;\n    });\n\n    // handle what happens on key press\n    const handleKeyPress = useCallback(\n        (event: any) => {\n            // check if one of the key is part of the ones we want\n            if (keys.some((key) => event.key === key)) {\n                callbackRef.current(event);\n            }\n        },\n        [keys]\n    );\n\n    useEffect(() => {\n        // target is either the provided node or the document\n        const targetNode = node ?? document;\n        // attach the event listener\n        targetNode &&\n            targetNode.addEventListener(\"keydown\", handleKeyPress);\n\n        // remove the event listener\n        return () =>\n            targetNode &&\n            targetNode.removeEventListener(\"keydown\", handleKeyPress);\n    }, [handleKeyPress, node]);\n};\n\nexport default useKeyPress;"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,eAAjC,EAAkDC,MAAlD,QAAgE,OAAhE;;AAEA,MAAMC,WAAW,GAAG,UAACC,IAAD,EAAiBC,QAAjB,EAAgD;EAAA;;EAAA,IAAhBC,IAAgB,uEAAT,IAAS;EAChE;EACA,MAAMC,WAAW,GAAGL,MAAM,CAACG,QAAD,CAA1B;EACAJ,eAAe,CAAC,MAAM;IAClBM,WAAW,CAACC,OAAZ,GAAsBH,QAAtB;EACH,CAFc,CAAf,CAHgE,CAOhE;;EACA,MAAMI,cAAc,GAAGV,WAAW,CAC7BW,KAAD,IAAgB;IACZ;IACA,IAAIN,IAAI,CAACO,IAAL,CAAWC,GAAD,IAASF,KAAK,CAACE,GAAN,KAAcA,GAAjC,CAAJ,EAA2C;MACvCL,WAAW,CAACC,OAAZ,CAAoBE,KAApB;IACH;EACJ,CAN6B,EAO9B,CAACN,IAAD,CAP8B,CAAlC;EAUAJ,SAAS,CAAC,MAAM;IACZ;IACA,MAAMa,UAAU,GAAGP,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAWQ,QAA3B,CAFY,CAGZ;;IACAD,UAAU,IACNA,UAAU,CAACE,gBAAX,CAA4B,SAA5B,EAAuCN,cAAvC,CADJ,CAJY,CAOZ;;IACA,OAAO,MACHI,UAAU,IACVA,UAAU,CAACG,mBAAX,CAA+B,SAA/B,EAA0CP,cAA1C,CAFJ;EAGH,CAXQ,EAWN,CAACA,cAAD,EAAiBH,IAAjB,CAXM,CAAT;AAYH,CA9BD;;GAAMH,W;;AAgCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}